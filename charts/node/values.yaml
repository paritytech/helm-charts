# Default values for node.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## Provide a name in place of node for `app:` labels
##
nameOverride: ""

## Provide a name to substitute for the full names of resources
##
fullnameOverride: ""

## Additional common labels on pods and services
##
# extraLabels:
#   type: rpc


## Image of Polkadot Node.
##
image:
  repository: parity/polkadot
  tag: latest
  pullPolicy: Always

## Image of Init containers to download chain
##
initContainer:
  image:
    repository: paritytech/lz4
    tag: latest
  ## Add `-x` shell option to initContainers
  ## Note: passwords and keys used in initContainers can appear in logs
  ##
  debug: false

## Image of kubectl to use for relay P2p service
##
kubectl:
  image:
    repository: bitnami/kubectl
    tag: latest

## Used to sync chain from/to GCS bucket
##
googleCloudSdk:
  image:
    repository: google/cloud-sdk
    tag: slim # more lightweight than the full image and still contains gsutil
  gsutilFlags: '-m -o "GSUtil:parallel_process_count=$(nproc --all)" -o "GSUtil:parallel_thread_count=2"'
  # serviceAccountKey: ""

## Reference to one or more secrets to be used when pulling images
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
##
imagePullSecrets: []

## Service account for the node to use
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
##
serviceAccount:
  create: true
  createRoleBinding: true
  annotations: {}

  ## The name of the service account to use.
  ## If not set and create is true, a name is generated using the fullname template
  ##
  name: ""

## SecurityContext holds pod-level security attributes and common container settings.
## This defaults to non root user with uid 1000 and gid 1000.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
##
podSecurityContext:
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

podDisruptionBudget:
  enabled: false
  #minAvailable:
  #maxUnavailable:

## Creates an ingress resource
##
ingress:
  enabled: false
  annotations: {}
  #  kubernetes.io/ingress.class: nginx
  #  kubernetes.io/tls-acme: "true"
  rules: []
  #  - host: chart-example.local
  #    paths:
  #      - serviceName: node
  #        servicePort: 9944
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local


## Deploy a substrate node
## ref: https://docs.substrate.io/tutorials/v3/private-network/
node:
  chain: "polkadot"
  command: "polkadot"
  replicas: 1
  role: full

  ## Database backend engine to use
  ##
  database: rocksdb

  ## Node may require custom name for chainspec file.
  ## ref:  moonbeam https://github.com/PureStake/moonbeam/issues/1104#issuecomment-996787548
  ## Note: path should start with /chain-data/ since this folder mount in init container download-chainspec.
  ##
  customChainspecPath: "/chain-data/chainspec.json"
  # customChainspecUrl:
  forceDownloadChainspec: false

  chainData:
    ## Configuration to download chain snapshot from remote URL
    ##
    # snapshotUrl: "https://dot-rocksdb.polkashots.io/snapshot"
    # snapshotFormat: lz4
    # kubernetesVolumeSnapshot: ""
    # kubernetesVolumeToClone: ""
    # GCSBucketUrl: ""
    # chainPath: ""
    ## Storage class to use for persistent volume
    ##
    storageClass: "default"
    volumeSize: 100Gi

  chainKeystore:
    # kubernetesVolumeSnapshot: ""
    # kubernetesVolumeToClone: ""
    ## Storage class to use for persistent volume
    ##
    storageClass: "default"
    volumeSize: 10Mi
    accessModes: ["ReadWriteOnce"]

  ## Deploy a collator node
  ## ref: https://wiki.polkadot.network/docs/learn-collator
  ## If Collator is enabled, collator image must be used
  ##
  collator:
    isParachain: false

    ## Name of the Relay Chain to connect
    ##
    relayChain: polkadot
    ## Database backend engine to use
    ##
    database: rocksdb
    ## File containing chainspec of relaychain for
    ##
    relayChainCustomChainspecPath: "/relaychain-data/relay_chain_chainspec.json"
    # relayChainCustomChainspecUrl: ""

    relayChainData:
      ## Configuration to download chain snapshot from remote URL
      ##
      # snapshotUrl: "https://dot-rocksdb.polkashots.io/snapshot"
      # snapshotFormat: lz4
      # kubernetesVolumeSnapshot: ""
      # kubernetesVolumeToClone: ""
      # GCSBucketUrl: ""
      # chainPath: ""
      ## Storage class to use for persistent volume
      ##
      storageClass: "default"
      volumeSize: 100Gi

    relayChainKeystore:
      # kubernetesVolumeSnapshot: ""
      # kubernetesVolumeToClone: ""
      ## Storage class to use for persistent volume
      ##
      storageClass: "default"
      volumeSize: 10Mi
      accessModes: ["ReadWriteOnce"]

    ## Expose relay chain metrics via Prometheus format in /metrics endpoint
    ## Pass the following args:
    ##   - "--prometheus-external" \
    ##   - "--prometheus-port {{ port }}"
    ##
    relayChainPrometheus:
      enabled: false
      port: 9625

    ## Additional args to use for relay chain node
    ##
    # relayChainFlags: []

  ## Additional args to use
  ##
  flags:
    - "--rpc-external"
    - "--ws-external"
    - "--rpc-methods=safe"
    - "--rpc-cors=all"

  ## Keys to use by the node
  ## ref: https://wiki.polkadot.network/docs/learn-keys
  ##
  keys: {}
  # - type: "gran"
  #   scheme: "ed25519"
  #   seed: "//Alice//gran"
  # - type: "babe"
  #   scheme: "sr25519"
  #   seed: "//Alice//babe"

  ## Component to inject secrets via annotation of Hashicorp Vault
  ## ref: https://www.vaultproject.io/docs/platform/k8s/injector/annotations
  ##
  vault:
    ## Vault annotations to use
    ##
    #authPath: ""
    #authRole: ""
    #authType: ""
    #authConfigType: ""
    #authConfigServiceAccount: ""

    ## Keys to fetch from Hashicorp Vault and set on the node
    ##
    keys: {}
      # - name: grankey
      #   type: type
      #   scheme: scheme
      #   vaultPath: kv/secret/grankey
      #   vaultKey: gran
      #   extraDerivation: //
      # - name: babekey
      #   type: type
      #   scheme: scheme
      #   vaultPath: kv/secrets/babeKey
      #   vaultKey: babe

    ## Node key to use via vault
    ##
    nodeKey: {}
      # name: nodekey
      # vaultPath: kv/secret/nodekey
      # Remark; vaultKey cannot contain dashes ('-'), only alphanumeric characters due to a limitation in the go templating
      # vaultKey: key
      # vaultKeyAppendPodIndex: false

  ## If enabled, generate a persistent volume to use for the keys
  ##
  persistGeneratedNodeKey: false
  # customNodeKey: ""

  ## Set the amount of blocks to retain
  ##
  # pruning: 1000

  ## Expose metrics via Prometheus format in /metrics endpoint
  ## Pass the following args:
  ##   - "--prometheus-external" \
  ##   - "--prometheus-port {{ .Values.node.prometheus.port }}"
  ##
  prometheus:
    enabled: true
    port: 9615

  ## Enable Service Monitor of Prometheus-Operator
  ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/user-guides/getting-started.md#include-servicemonitors
  ##
  serviceMonitor:
    enabled: false
    #namespace: monitoring
    interval: 30s
    scrapeTimeout: 10s
    targetLabels:
      - node
    relabelings: []
    metricRelabelings: []

  serviceAnnotations: {}

  ## Configuration of individual services of node
  ##
  perNodeServices:
    ## If enabled, generic service to expose common node APIs
    ##
    apiService:
      enabled: true
      externalTrafficPolicy: Cluster
      type: ClusterIP # or NodePort, LoadBalancer
      annotations: {}
      httpPort: 9933
      wsPort: 9944
      prometheusPort: 9615
      relayChainPrometheusPort: 9625
      externalDns:
        enabled: false
        hostname: example.com
        ttl: 300
    ## If enabled, create service to expose relay chain P2P
    ##
    relayP2pService:
      enabled: false
      externalTrafficPolicy: Cluster
      type: NodePort # or ClusterIP or LoadBalancer
      port: 30333
      annotations: {}
      externalDns:
        enabled: false
        hostname: example.com
        ttl: 300
    ## If enabled, create service to expose parachain P2P
    ##
    paraP2pService:
      enabled: false
      externalTrafficPolicy: Cluster
      type: NodePort # or ClusterIP, LoadBalancer
      port: 30334
      annotations: {}
      externalDns:
        enabled: false
        hostname: example.com
        ttl: 300
    ## If enabled, set `--public-addr` flag to be the NodePort p2p services external address
    ##
    setPublicAddressToExternalIp:
      enabled: false
      ipRetrievalServiceUrl: https://ifconfig.io

  ## Pod management policy of stateful set
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
  ##
  # podManagementPolicy: Parallel

  ## Enables Jaeger Agent as a sidecar
  ##
  tracing:
    enabled: false

  ## Enables Sustrate API as a sidecar
  ##
  substrateApiSidecar:
    enabled: false

  ## Enable Node container's startup and readiness probes
  ##
  enableStartupProbe: true
  enableReadinessProbe: true

  ## Resource limits & requests
  ##
  resources: {}

  ## Create backup on startup using an init container
  ##
  enableChainBackupGcs: false
  #chainBackupGcsUrl:


## Configuration of Substrate API
## ref: https://github.com/paritytech/substrate-api-sidecar
##
substrateApiSidecar:
  image:
    repository: parity/substrate-api-sidecar
    tag: latest
  env: {}
  resources: {}

## Configuration of Jaeger agent
## https://github.com/jaegertracing/jaeger
##
jaegerAgent:
  image:
    repository: jaegertracing/jaeger-agent
    tag: latest
  ports:
    # accept jaeger.thrift over compact thrift protocol
    compactPort: 6831
    # accept jaeger.thrift over binary thrift protocol
    binaryPort: 6832
    # (HTTP) serve configs, sampling strategies
    samplingPort: 5778
  collector:
    url: null
    # Jaeger Default GRPC port is 14250
    port: 14250
  env: {}
  resources: {}

## Annotations to add to the node pod
##
podAnnotations: {}

## Define which Nodes the Pods are scheduled on.
##
nodeSelector: {}

terminationGracePeriodSeconds: 60

## Tolerations for use with node taints
##
tolerations: []

## Assign custom affinity rules
##
affinity: {}

## Additional containers to run in the pod
##
extraContainers: []

## Autoscaling configuration
autoscaling:
  enabled: false
  minReplicas: ""
  maxReplicas: ""
  targetCPU: ""
  targetMemory: ""
  additionalMetrics: {}
