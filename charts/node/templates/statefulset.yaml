{{ $fullname :=  include "node.fullname" . }}
{{ $selectorLabels :=  include "node.selectorLabels" . }}
{{ $serviceLabels :=  include "node.serviceLabels" .  }}
{{ $serviceAccountName :=  include "node.serviceAccountName" . }}
{{ $databasePath := include "node.databasePath" . }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $fullname }}
  labels:
    {{- include "node.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
  {{- $selectorLabels | nindent 6 }}
  podManagementPolicy: {{ default "OrderedReady" .Values.node.podManagementPolicy }}
  replicas: {{ .Values.node.replicas | int }}
  serviceName: {{ $fullname }}
  template:
    metadata:
      {{- if or .Values.podAnnotations .Values.node.vault.keys .Values.node.vault.nodeKey }}
      annotations:
      {{- with .Values.podAnnotations }}
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- range $keys := .Values.node.vault.keys }}
        vault.hashicorp.com/agent-inject-secret-{{ .name }}: {{ .vaultPath | squote }}
        vault.hashicorp.com/agent-inject-template-{{ .name }}: |
          {{`{{ with secret "`}}{{ .vaultPath }}{{`" }}{{ .Data.data.`}}{{ .vaultKey }}{{` }}{{ end }}`}}
      {{- end }}
      {{- if .Values.node.vault.nodeKey }}
      {{- if .Values.node.vault.nodeKey.vaultKeyAppendPodIndex }}
        {{- range $index := until (.Values.node.replicas | int) }}
        vault.hashicorp.com/agent-inject-secret-{{ $.Values.node.vault.nodeKey.name }}-{{ $index }}: {{ $.Values.node.vault.nodeKey.vaultPath | squote }}
        vault.hashicorp.com/agent-inject-template-{{ $.Values.node.vault.nodeKey.name }}-{{ $index }}: |
            {{`{{ with secret "`}}{{ $.Values.node.vault.nodeKey.vaultPath }}{{`" }}{{ .Data.data.`}}{{ printf "%s_%s" $.Values.node.vault.nodeKey.vaultKey ($index | toString) }}{{` }}{{ end }}`}}
        {{- end }}
      {{- else }}
        vault.hashicorp.com/agent-inject-secret-{{ .Values.node.vault.nodeKey.name }}: {{ .Values.node.vault.nodeKey.vaultPath | squote }}
        vault.hashicorp.com/agent-inject-template-{{ .Values.node.vault.nodeKey.name }}: |
          {{`{{ with secret "`}}{{ .Values.node.vault.nodeKey.vaultPath }}{{`" }}{{ .Data.data.`}}{{ .Values.node.vault.nodeKey.vaultKey }}{{` }}{{ end }}`}}
      {{- end }}
        vault.hashicorp.com/agent-inject: 'true'
        vault.hashicorp.com/agent-init-first: 'true'
        vault.hashicorp.com/agent-pre-populate-only: 'true'
        vault.hashicorp.com/role: {{ .Values.node.vault.authRole | default (include "node.serviceAccountName" .) | squote }}
      {{- end }}
      {{- if .Values.node.vault.authType }}
        vault.hashicorp.com/auth-type: {{ .Values.node.vault.authType | squote }}
      {{- end }}
      {{- if .Values.node.vault.authPath }}
        vault.hashicorp.com/auth-path: {{ .Values.node.vault.authPath | squote }}
      {{- end }}
      {{- if .Values.node.vault.authConfigType }}
        vault.hashicorp.com/auth-config-type: {{ .Values.node.vault.authConfigType | squote }}
      {{- end }}
      {{- if .Values.node.vault.authConfigServiceAccount }}
        vault.hashicorp.com/auth-config-service-account: {{ .Values.node.vault.authConfigServiceAccount | squote }}
      {{- end }}
      {{- end }}
      labels:
      {{- include "node.labels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        {{- if .Values.node.chainDataSnapshotUrl }}
        - name: download-chain-snapshot
          image: {{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - |
              set -eu -o pipefail
              if [ -d "/data/chains/${CHAIN_PATH}/{{ $databasePath }}" ]; then
                echo "Database directory already exists, skipping chain snapshot download"
              else
                echo "Downloading chain snapshot"
                SNAPSHOT_URL="{{ .Values.node.chainDataSnapshotUrl }}"
                mkdir -p /data/chains/${CHAIN_PATH}/{{ $databasePath }}/
                if [ "${SNAPSHOT_FORMAT}" == "lz4" ]; then
                  wget -O - ${SNAPSHOT_URL} | lz4 -c -d - | tar -x -C /data/chains/${CHAIN_PATH}/
                else
                  wget -O - ${SNAPSHOT_URL} | tar -x -C /data/chains/${CHAIN_PATH}/{{ $databasePath }}/
                fi
              fi
          env:
            - name: CHAIN_PATH
              value: {{ default .Values.node.chain .Values.node.chainPath }}
            - name: SNAPSHOT_FORMAT
              value: {{ default "tar" .Values.node.chainDataSnapshotFormat }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
        {{- end }}
        {{- if .Values.node.collator.relayChainDataSnapshotUrl }}
        - name: download-relay-chain-snapshot
          image: {{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - |
              set -eu -o pipefail
              if [ -d "/data/relay/chains/${RELAY_CHAIN_PATH}/{{ $databasePath }}" ]; then
                echo "Database directory already exists, skipping relay-chain snapshot download"
              else
                echo "Downloading relay-chain snapshot"
                RELAY_SNAPSHOT_URL="{{ .Values.node.collator.relayChainDataSnapshotUrl }}"
                mkdir -p /data/relay/chains/${RELAY_CHAIN_PATH}/{{ $databasePath }}
                if [ "${RELAY_SNAPSHOT_FORMAT}" == "lz4" ]; then
                  wget -O - ${RELAY_SNAPSHOT_URL} | lz4 -c -d - | tar -x -C /data/chains/${RELAY_CHAIN_PATH}/
                else
                  wget -O - ${RELAY_SNAPSHOT_URL} | tar -x -C /data/chains/${RELAY_CHAIN_PATH}/{{ $databasePath }}/
                fi
              fi
          env:
            - name: RELAY_SNAPSHOT_FORMAT
              value: {{ default "tar" .Values.node.collator.relayChainDataSnapshotFormat }}
            - name: RELAY_CHAIN_PATH
              value: {{ default .Values.node.collator.relayChain .Values.node.collator.relayChainPath }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
        {{- end }}
        {{- if .Values.node.chainDataGcsBucketUrl }}
        - name: sync-chain-gcs
          image: {{ .Values.googleCloudSdk.image.repository }}:{{ .Values.googleCloudSdk.image.tag }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - |
              set -eu
              {{- if .Values.googleCloudSdk.serviceAccountKey }}
              gcloud auth activate-service-account --key-file /tmp/service-account-key.json
              {{- end }}
              if [ -d "/data/chains/${CHAIN_PATH}/{{ $databasePath }}" ]; then
                echo "Chain database directory already exists, skipping GCS sync"
              else
                BUCKET_URL="{{ .Values.node.chainDataGcsBucketUrl }}"
                LATEST=$(gsutil cat ${BUCKET_URL}/latest_version.meta.txt)
                if [ -z "$LATEST" ]; then
                  echo "Failed to retrieve latest_version metadata"
                  exit 1
                fi
                mkdir -p /data/chains/${CHAIN_PATH}/{{ $databasePath }}
                gsutil -m -o "GSUtil:parallel_process_count=3" -o "GSUtil:parallel_thread_count=15" rsync -d -r ${BUCKET_URL}/${LATEST} /data/chains/${CHAIN_PATH}/{{ $databasePath }}/
              fi
          env:
            - name: CHAIN_PATH
              value: {{ default .Values.node.chain .Values.node.chainPath }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
            {{- if .Values.googleCloudSdk.serviceAccountKey }}
            - name: service-account-key
              mountPath: /tmp
              readOnly: true
            {{- end }}
        {{- end }}
        {{- if .Values.node.collator.relayChainDataGcsBucketUrl }}
        - name: sync-relay-chain-gcs
          image: {{ .Values.googleCloudSdk.image.repository }}:{{ .Values.googleCloudSdk.image.tag }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - |
              set -eu
              {{- if .Values.googleCloudSdk.serviceAccountKey }}
              gcloud auth activate-service-account --key-file /tmp/service-account-key.json
              {{- end }}
              if [ -d "/data/relay/chains/${RELAY_CHAIN_PATH}/{{ $databasePath }}" ]; then
                echo "Relay-chain database directory already exists, skipping GCS sync"
              else
                BUCKET_URL="{{ .Values.node.collator.relayChainDataGcsBucketUrl }}"
                LATEST=$(gsutil cat ${BUCKET_URL}/latest_version.meta.txt)
                if [ -z "$LATEST" ]; then
                  echo "Failed to retrieve latest_version metadata"
                  exit 1
                fi
                mkdir -p /data/relay/chains/${RELAY_CHAIN_PATH}/{{ $databasePath }}
                gsutil -m -o "GSUtil:parallel_process_count=3" -o "GSUtil:parallel_thread_count=15" rsync -d -r ${BUCKET_URL}/${LATEST} /data/relay/chains/${RELAY_CHAIN_PATH}/{{ $databasePath }}/
              fi
          env:
            - name: RELAY_CHAIN_PATH
              value: {{ default .Values.node.collator.relayChain .Values.node.collator.relayChainPath }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
             {{- if .Values.googleCloudSdk.serviceAccountKey }}
            - name: service-account-key
              mountPath: /tmp
              readOnly: true
             {{- end }}
         {{- end }}
        {{- if or .Values.node.customChainspecUrl .Values.node.collator.relayChainCustomChainspecUrl }}
        - name: download-chainspec
          image: {{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - |
              set -eu -o pipefail
              apk add --no-cache wget
              {{- if .Values.node.customChainspecUrl }}
              {{- if not .Values.node.forceDownloadChainspec }}
              if [ ! -f {{ .Values.node.customChainspecPath }} ]; then
              {{- end }}
                wget -O {{ .Values.node.customChainspecPath }} {{ .Values.node.customChainspecUrl }}
              {{- if not .Values.node.forceDownloadChainspec }}
              fi
              {{- end }}
              {{- end }}
              {{- if .Values.node.collator.relayChainCustomChainspecUrl }}
              {{- if not .Values.node.forceDownloadChainspec }}
              if [ ! -f {{ .Values.node.relayChainCustomChainspecPath }} ]; then
              {{- end }}
                wget -O {{ .Values.node.relayChainCustomChainspecPath }} {{ .Values.node.collator.relayChainCustomChainspecUrl }}
              {{- if not .Values.node.forceDownloadChainspec }}
              fi
              {{- end }}
              {{- end }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
          securityContext:
            runAsUser: 0
        {{- end }}
        {{- if .Values.node.keys }}
        - name: inject-keys
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - |
              set -eu
              {{- range $keys := .Values.node.keys }}
              {{ $.Values.node.command }} key insert --base-path /data \
              --chain {{ if $.Values.node.customChainspecUrl }}{{ $.Values.node.customChainspecPath }}{{ else }}${CHAIN}{{ end }} \
              --key-type $(cat /var/run/secrets/{{ .type }}/type) \
              --scheme $(cat /var/run/secrets/{{ .type }}/scheme) \
              --suri /var/run/secrets/{{ .type }}/seed \
              && echo "Inserted key {{ .type }} into Keystore" \
              || echo "Failed to insert key {{ .type}} into Keystore."
              {{- end }}
          env:
            - name: CHAIN
              value: {{ .Values.node.chain }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
          {{- range $keys := .Values.node.keys }}
            - mountPath: /var/run/secrets/{{ .type }}
              name: {{ .type }}
          {{- end }}
        {{ else if .Values.node.vault.keys }}
        - name: inject-vault-keys
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - |
              set -eu
              {{- range $keys := .Values.node.vault.keys }}
              {{ $.Values.node.command }} key insert --base-path /data \
              --chain {{ if $.Values.node.customChainspecUrl }}{{ $.Values.node.customChainspecPath }}{{ else }}${CHAIN}{{ end }} \
              --key-type {{ .type }} \
              --scheme {{ .scheme }} \
              {{- if .extraDerivation }}
              --suri "$(cat /vault/secrets/{{ .name }}){{ .extraDerivation }}" \
              {{- else }}
              --suri "/vault/secrets/{{ .name }}" \
              {{- end }}
              && echo "Inserted key {{ .name }} (type={{ .type }}, scheme={{ .scheme }}) into Keystore" \
              || echo "Failed to insert key {{ .name }} (type={{ .type }}, scheme={{ .scheme }}) into Keystore."
              {{- end }}
          env:
            - name: CHAIN
              value: {{ .Values.node.chain }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
        {{- end }}
        {{- if or $.Values.node.perNodeServices.relayP2pService.enabled $.Values.node.perNodeServices.paraP2pService.enabled }}
        - name: retrieve-node-port
          image: {{ .Values.kubectl.image.repository }}:{{ .Values.kubectl.image.tag }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - |
              set -eu
              POD_INDEX="${HOSTNAME##*-}"
              RELAY_CHAIN_P2P_PORT="$(kubectl --namespace {{ .Release.Namespace }} get service {{ $fullname }}-${POD_INDEX}-relay-chain-p2p -o jsonpath='{.spec.ports[*].nodePort}')"
              echo "${RELAY_CHAIN_P2P_PORT}" > /data/relay_chain_p2p_port
              echo "Retrieved Kubernetes service node port from {{ $fullname }}-${POD_INDEX}-relay-chain-p2p, saved ${RELAY_CHAIN_P2P_PORT} to /data/relay_chain_p2p_port"
              {{- if .Values.node.collator.isParachain }}
              PARA_CHAIN_P2P_PORT="$(kubectl --namespace {{ .Release.Namespace }} get service {{ $fullname }}-${POD_INDEX}-para-chain-p2p -o jsonpath='{.spec.ports[*].nodePort}')"
              echo "${PARA_CHAIN_P2P_PORT}" > /data/para_chain_p2p_port
              echo "Retrieved Kubernetes service node port from {{ $fullname }}-${POD_INDEX}-para-chain-p2p, saved ${PARA_CHAIN_P2P_PORT} to /data/para_chain_p2p_port"
              {{- end }}
              {{- if .Values.node.perNodeServices.setPublicAddressToExternalIp.enabled }}
              EXTERNAL_IP=$(curl {{ .Values.node.perNodeServices.setPublicAddressToExternalIp.ipRetrievalServiceUrl }})
              echo "${EXTERNAL_IP}" > /data/node_external_ip
              echo "Retrieved external IP from {{ .Values.node.perNodeServices.ipRetrievalServiceUrl }}, saved ${EXTERNAL_IP} to /data/node_external_ip"
              {{- end }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
        {{- end }}
      containers:
        - name: {{ .Values.node.chain }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - |
              set -eu
              POD_INDEX="${HOSTNAME##*-}"
              {{- if or $.Values.node.perNodeServices.relayP2pService.enabled $.Values.node.perNodeServices.paraP2pService.enabled }}
              {{- if .Values.node.perNodeServices.setPublicAddressToExternalIp.enabled }}
              EXTERNAL_IP="$(cat /data/node_external_ip)"
              echo "EXTERNAL_IP=${EXTERNAL_IP}"
              {{- end }}
              RELAY_CHAIN_P2P_PORT="$(cat /data/relay_chain_p2p_port)"
              echo "RELAY_CHAIN_P2P_PORT=${RELAY_CHAIN_P2P_PORT}"
              {{- if .Values.node.collator.isParachain }}
              PARA_CHAIN_P2P_PORT="$(cat /data/para_chain_p2p_port)"
              echo "PARA_CHAIN_P2P_PORT=${PARA_CHAIN_P2P_PORT}"
              {{- end }}
              {{- end }}
              exec {{ .Values.node.command }} \
                --name=${POD_NAME} \
                --base-path=/data/ \
                --chain={{ if .Values.node.customChainspecUrl }}{{ .Values.node.customChainspecPath }}{{ else }}${CHAIN}{{ end }} \
                {{- if or (eq .Values.node.role "authority") (eq .Values.node.role "validator") }}
                --validator \
                {{- end }}
                {{- if .Values.node.database }}
                --database={{ .Values.node.database }} \
                {{- end }}
                {{- if ge ( int .Values.node.pruning ) 1 }}
                --pruning={{ .Values.node.pruning }} \
                {{- else if and ( not ( kindIs "invalid" .Values.node.pruning ) ) ( eq 0 ( int .Values.node.pruning ) ) }}
                --pruning=archive \
                {{- end }}
                {{- if eq .Values.node.role "collator" }}
                --collator \
                {{- end }}
                {{- if eq .Values.node.role "light" }}
                --light \
                {{- end }}
                {{- if .Values.node.prometheus.enabled }}
                --prometheus-external \
                --prometheus-port {{ .Values.node.prometheus.port }} \
                {{- end }}
                {{- if .Values.node.collator.isParachain }}
                {{- if (or $.Values.node.perNodeServices.paraP2pService.enabled) }}
                {{- if .Values.node.perNodeServices.setPublicAddressToExternalIp.enabled }}
                --public-addr=/ip4/${EXTERNAL_IP}/tcp/${PARA_CHAIN_P2P_PORT} \
                {{- end }}
                --listen-addr=/ip4/0.0.0.0/tcp/${PARA_CHAIN_P2P_PORT} \
                {{- end }}
                --listen-addr=/ip4/0.0.0.0/tcp/30334 \
                {{- end }}
                {{- if .Values.node.persistGeneratedNodeKey }}
                --node-key-file /data/node-key \
                {{- else if .Values.node.customNodeKey }}
                --node-key $(cat /tmp/custom-node-key) \
                {{- else if .Values.node.vault.nodeKey }}
                --node-key $(cat /vault/secrets/{{ .Values.node.vault.nodeKey.name }}{{ if .Values.node.vault.nodeKey.vaultKeyAppendPodIndex }}-${POD_INDEX}{{ end }}) \
                {{- end }}
                {{- if .Values.node.tracing.enabled }}
                --jaeger-agent=127.0.0.1:{{ .Values.jaegerAgent.ports.compactPort }} \
                {{- end }}
                {{- join " " .Values.node.flags | nindent 16 }} \
                {{- if .Values.node.collator.isParachain }}
                -- \
                --base-path=/data/relay/ \
                {{- if .Values.node.collator.relayChainPrometheus.enabled }}
                --prometheus-external \
                --prometheus-port {{ .Values.node.collator.relayChainPrometheus.port }} \
                {{- end }}
                {{- end }}
                {{- if .Values.node.collator.relayChainCustomChainspecUrl }}
                --chain={{ .Values.node.relayChainCustomChainspecPath }} \
                {{- end }}
                {{- if (or $.Values.node.perNodeServices.relayP2pService.enabled ) }}
                {{- if .Values.node.perNodeServices.setPublicAddressToExternalIp.enabled }}
                --public-addr=/ip4/${EXTERNAL_IP}/tcp/${RELAY_CHAIN_P2P_PORT} \
                {{- end }}
                --listen-addr=/ip4/0.0.0.0/tcp/${RELAY_CHAIN_P2P_PORT} \
                {{- end }}
                --listen-addr=/ip4/0.0.0.0/tcp/30333 \

                {{- join " " .Values.node.collator.relayChainFlags | nindent 16 }}
          env:
            - name: CHAIN
              value: {{ .Values.node.chain }}
            - name: NODE_NAME
              value: "$(POD_NAME)"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          ports:
            - containerPort: 9933
              name: http-rpc
              protocol: TCP
            - containerPort: 9944
              name: websocket-rpc
              protocol: TCP
            - containerPort: {{ .Values.node.prometheus.port }}
              name: prometheus
              protocol: TCP
            {{- if and .Values.node.collator.isParachain .Values.node.collator.relayChainPrometheus.enabled }}
            - containerPort: {{ .Values.node.collator.relayChainPrometheus.port }}
              name: prom-relaychain
            {{- end }}    
            - containerPort: 30333
              name: p2p
              protocol: TCP
          {{- if .Values.node.enableStartupProbe }}
          # On startup, retry the connection to the /health endpoint every 10s for 5 min before killing the container
          startupProbe:
            failureThreshold: 30
            periodSeconds: 10
            httpGet:
              path: /health
              port: http-rpc
          {{- end }}
          {{- if .Values.node.enableReadinessProbe }}
          # Continuously retry the connection to the WS endpoint every 10s for 24h until success before marking the container as ready
          # If the WS endpoint is still not reachable (ie. node not fully synced) after 24 hours have passed, the container will be stuck in 'Not Ready' state
          readinessProbe:
            failureThreshold: 8640
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            # Important: the readiness probe will only work properly if the WS endpoint is exposed with --ws-external
            tcpSocket:
              port: websocket-rpc
          {{- end }}
          resources:
          {{- toYaml .Values.node.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
          {{- if .Values.node.persistGeneratedNodeKey }}
          {{- else if .Values.node.customNodeKey }}
            - mountPath: /tmp/
              name: custom-node-key
              readOnly: true
          {{- end }}
        {{- if .Values.node.substrateApiSidecar.enabled }}
        - name: substrate-api-sidecar
          image: {{ .Values.substrateApiSidecar.image.repository }}:{{ .Values.substrateApiSidecar.image.tag }}
          env:
            {{- range $key, $val := .Values.substrateApiSidecar.env }}
            - name: {{ $key }}
              value: {{ $val }}
            {{- end }}
          resources:
          {{- toYaml .Values.substrateApiSidecar.resources | nindent 12 }}
          ports:
            - containerPort: 8080
              name: api-sidecar
              protocol: TCP
        {{- end}}
        {{- if .Values.node.tracing.enabled }}
        - name: jaeger-agent-sidecar
          image: {{ .Values.jaegerAgent.image.repository }}:{{ .Values.jaegerAgent.image.tag }}
          args:
            - --reporter.grpc.host-port={{ .Values.jaegerAgent.collector.url }}:{{ .Values.jaegerAgent.collector.port }}
          env:
            {{- range $key, $val := .Values.jaegerAgent.env }}
            - name: {{ $key }}
              value: {{ $val }}
            {{- end }}
          resources:
          {{- toYaml .Values.jaegerAgent.resources | nindent 12 }}
          ports:
            - name: jaeger-compact
              containerPort: {{ .Values.jaegerAgent.ports.compactPort }}
              protocol: UDP
            - name: jaeger-binary
              containerPort: {{ .Values.jaegerAgent.ports.binaryPort }}
              protocol: UDP
            - name: http
              containerPort: {{ .Values.jaegerAgent.ports.samplingPort }}
              protocol: TCP
            - name: admin
              containerPort: 14271
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: admin
          readinessProbe:
            httpGet:
              path: /
              port: admin
        {{- end}}
        {{- with .Values.extraContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end}}
      serviceAccountName: {{ $serviceAccountName }}
      securityContext:
      {{- toYaml .Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 10 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      {{- if .Values.googleCloudSdk.serviceAccountKey }}
        - name: service-account-key
          secret:
            secretName: chain-data-gcs-bucket-service-account-key
      {{- end }}
      {{- if .Values.node.persistGeneratedNodeKey }}
      {{- else if .Values.node.customNodeKey }}
        - name: custom-node-key
          secret:
            secretName: {{ $fullname }}-custom-node-key
      {{- end }}
      {{- range $keys := .Values.node.keys }}
        - name: {{ .type }}
          secret:
            secretName: {{ $fullname }}-{{ .type }}
            defaultMode: 0400
      {{- end }}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: chain-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        {{- if .Values.node.chainDataKubernetesVolumeSnapshot }}
        dataSource:
          name: {{ .Values.node.chainDataKubernetesVolumeSnapshot }}
          kind: VolumeSnapshot
          apiGroup: snapshot.storage.k8s.io
        {{- end }}
        storageClassName: {{ .Values.storageClass }}
        resources:
          requests:
            storage: {{ .Values.node.dataVolumeSize }}
